import argparseimport coverageimport osimport subprocessimport sysimport djangofrom django.conf import settings as django_settingsfrom django.test.utils import get_runnerTEST_ARGS = {'apps': ['tests'], 'settings': 'tests.settings'}FLAKE8_ARGS = ['social_twitter', 'tests']ISORT_ARGS = ['--recursive', '--check-only', '--diff',              '-o' 'django'              '-p' 'tests',              'social_twitter', 'tests']def exit_on_failure(ret):    if ret:        sys.exit(ret)def get_argument_parser():    """    Initializes the command line argument parser.    :return: argument parser    """    parser = argparse.ArgumentParser(description='Run some processes.')    parser.add_argument('--test', '-t', dest='test', default=False,                        action='store_true',                        help='run django tests')    parser.add_argument('--test-coverage', '-tc', dest='test_coverage',                        default=False, action='store_true',                        help='run django tests with coverage report')    # parser.add_argument('--test-apps', '-ta', dest='test_apps',    #                     metavar='DJANGO_APPS',    #                     default=['tests'], nargs='*',    #                     help='define django test settings')    # parser.add_argument('--test-settings', '-ts', dest='test_settings',    #                     metavar='DJANGO_SETTINGS',    #                     default='tests.settings',    #                     nargs='?', help='define django test settings')    parser.add_argument('--lint', '-l', dest='lint', default=False,                        action='store_true',                        help='run linter')    return parserdef run_with_coverage(func):    cov = coverage.Coverage()    cov.start()    func_return = func()    cov.stop()    cov.save()    cov.report()    return func_returndef run_test(run_coverage):    os.environ['DJANGO_SETTINGS_MODULE'] = TEST_ARGS['settings']    django.setup()    test_runner = get_runner(django_settings)()    def run_tests():        return test_runner.run_tests(TEST_ARGS['apps'])    if run_coverage:        failures = run_with_coverage(run_tests)    else:        failures = run_tests()    return bool(failures)def run_flake8():    print('Running flake8')    ret = subprocess.call(['flake8'] + FLAKE8_ARGS)    print('flake8 failed' if ret else 'flake8 passed')    return retdef run_isort():    print('Running isort')    ret = subprocess.call(['isort'] + ISORT_ARGS)    print('isort failed. Fix by running `isort --recursive .`'          if ret else 'isort passed')    return retif __name__ == '__main__':    argparser = get_argument_parser()    args = argparser.parse_args()    if args.test or args.test_coverage:        exit_on_failure(run_test(args.test_coverage))    if args.lint:        exit_on_failure(run_flake8())        exit_on_failure(run_isort())    # else:    #     argparser.print_help()